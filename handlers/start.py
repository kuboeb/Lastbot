"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
import re
import logging

from database import db_manager, BotUser, Application, TrafficSource, UserAction, Referral
from keyboards.keyboards import (
    get_main_menu_new_user,
    get_main_menu_existing_user,
    get_reply_keyboard_new_user,
    get_reply_keyboard_existing_user
)
from utils import messages

router = Router(name="start")
logger = logging.getLogger(__name__)

async def save_user_action(session, user_id: int, action: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_action = UserAction(
        user_id=user_id,
        action=action
    )
    session.add(user_action)

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã start
    command_args = message.text.strip().split(maxsplit=1)
    start_param = command_args[1] if len(command_args) > 1 else None
    
    referrer_id = None
    source_code = None
    click_id = None
    
    if start_param:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if start_param.startswith('ref_'):
            try:
                referrer_id = int(start_param[4:])
            except ValueError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
        elif start_param.startswith('src_'):
            parts = start_param.split('-')
            source_code = parts[0][4:]  # –£–±–∏—Ä–∞–µ–º src_
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º click_id –µ—Å–ª–∏ –µ—Å—Ç—å
            for part in parts[1:]:
                if part.startswith('fbclid_') or part.startswith('gclid_'):
                    click_id = part
    
    async with db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(BotUser).where(BotUser.user_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            user = BotUser(
                user_id=user_id,
                username=username,
                first_seen=message.date,
                last_activity=message.date
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ
            if source_code:
                result = await session.execute(
                    select(TrafficSource).where(TrafficSource.tracking_code == source_code)
                )
                source = result.scalar_one_or_none()
                if source:
                    user.source_id = source.id
            
            session.add(user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if referrer_id and referrer_id != user_id:
                referral = Referral(
                    referrer_id=referrer_id,
                    referred_id=user_id,
                    created_at=message.date
                )
                session.add(referral)
            
            await session.commit()
        else:
            user.last_activity = message.date
            await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        result = await session.execute(select(Application).where(Application.user_id == user_id))
        application = result.scalar_one_or_none()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_action(session, user_id, 'start')
        await session.commit()
        
        if application:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É
            referral_link = f"https://t.me/{(await message.bot.get_me()).username}?start=ref_{user_id}"
            
            # –°—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            result = await session.execute(
                select(func.count(Referral.id)).where(Referral.referrer_id == user_id)
            )
            referrals_count = result.scalar() or 0
            
            await message.answer(
                messages.WELCOME_EXISTING_USER.format(
                    referral_link=referral_link,
                    referrals_count=referrals_count
                ),
                reply_markup=get_reply_keyboard_existing_user()
            )
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_existing_user()
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            if referrer_id:
                result = await session.execute(
                    select(BotUser).where(BotUser.user_id == referrer_id)
                )
                referrer = result.scalar_one_or_none()
                if referrer:
                    referrer_name = referrer.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    await message.answer(
                        f"üéÅ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç {referrer_name}!\n"
                        f"–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è 50% –∫—É—Ä—Å–∞ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 50‚Ç¨ üí∞"
                    )
            
            await message.answer(
                messages.WELCOME_NEW_USER,
                reply_markup=get_reply_keyboard_new_user()
            )
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_new_user()
            )

@router.message(F.text == messages.BTN_MAIN_MENU)
async def main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    async with db_manager.get_session() as session:
        result = await session.execute(
            select(Application).where(Application.user_id == message.from_user.id)
        )
        application = result.scalar_one_or_none()
        
        if application:
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_existing_user()
            )
        else:
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_new_user()
            )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    
    async with db_manager.get_session() as session:
        result = await session.execute(
            select(Application).where(Application.user_id == callback.from_user.id)
        )
        application = result.scalar_one_or_none()
        
        if application:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_existing_user()
            )
        else:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_new_user()
            )
        
        await callback.answer()

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await message.answer(messages.HELP_MESSAGE)

@router.message(Command("apply"))
async def cmd_apply(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å"""
    from handlers.registration import start_registration
    await start_registration(message, state)

@router.message(Command("ref"))
async def cmd_ref(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    async with db_manager.get_session() as session:
        result = await session.execute(
            select(Application).where(Application.user_id == user_id)
        )
        application = result.scalar_one_or_none()
        
        if application:
            bot_info = await message.bot.get_me()
            referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
            
            result = await session.execute(
                select(func.count(Referral.id)).where(Referral.referrer_id == user_id)
            )
            referrals_count = result.scalar() or 0
            
            await message.answer(
                messages.REFERRAL_INFO.format(
                    referral_link=referral_link,
                    referrals_count=referrals_count
                )
            )
        else:
            await message.answer(
                "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
            )

@router.message(Command("program"))
async def cmd_program(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–∞"""
    from handlers.info import show_program
    await show_program(message)

@router.message(Command("reviews"))
async def cmd_reviews(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    from handlers.info import show_reviews
    await show_reviews(message)
