from sqlalchemy import select
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import re
import logging

from database import db_manager, BotUser, Application, UserAction, TrafficSource
from states.registration import RegistrationStates
from keyboards.keyboards import (
    get_back_keyboard, 
    get_time_selection_keyboard,
    get_confirmation_keyboard,
    get_share_referral_keyboard,
    get_reply_keyboard_new_user, 
    get_main_menu_new_user, 
    get_reply_keyboard_existing_user
)
from utils import messages
from utils.validators import validate_phone, validate_name, validate_country, format_phone
from config import config

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "apply")
@router.message(Command("apply"))
async def start_registration(update: Message | CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if isinstance(update, CallbackQuery):
        message = update.message
        user_id = update.from_user.id
        await update.answer()
    else:
        message = update
        user_id = update.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    async with db_manager.get_session() as session:
        existing_app = await session.query(Application).filter_by(user_id=user_id).first()
        
        if existing_app:
            await message.answer(messages.ERROR_ALREADY_REGISTERED)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        action = UserAction(user_id=user_id, action="begin_registration")
        session.add(action)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await message.answer(
        messages.REGISTRATION_NAME,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(RegistrationStates.waiting_for_name, F.text == messages.BTN_BACK)
async def back_from_name(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_reply_keyboard_new_user()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_new_user()
    )

@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    full_name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_name(full_name)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(full_name=full_name)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    async with db_manager.get_session() as session:
        action = UserAction(user_id=message.from_user.id, action="enter_name")
        session.add(action)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—É
    await message.answer(
        messages.REGISTRATION_COUNTRY,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_country)

@router.message(RegistrationStates.waiting_for_country, F.text == messages.BTN_BACK)
async def back_from_country(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏"""
    await message.answer(
        messages.REGISTRATION_NAME,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(RegistrationStates.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_country(country)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(country=country)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    async with db_manager.get_session() as session:
        action = UserAction(user_id=message.from_user.id, action="enter_country")
        session.add(action)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await message.answer(
        messages.REGISTRATION_PHONE,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone, F.text == messages.BTN_BACK)
async def back_from_phone(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Å—Ç—Ä–∞–Ω—ã"""
    await message.answer(
        messages.REGISTRATION_COUNTRY,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_country)

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = format_phone(phone)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_phone(phone)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(phone=phone)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    async with db_manager.get_session() as session:
        action = UserAction(user_id=message.from_user.id, action="enter_phone")
        session.add(action)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    await message.answer(
        messages.REGISTRATION_TIME,
        reply_markup=get_time_selection_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_time)

@router.callback_query(RegistrationStates.waiting_for_time, F.data.startswith("time_"))
async def process_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_map = {
        "time_9_12": "9:00 - 12:00",
        "time_12_15": "12:00 - 15:00",
        "time_15_18": "15:00 - 18:00",
        "time_18_21": "18:00 - 21:00"
    }
    
    preferred_time = time_map.get(callback.data, "9:00 - 12:00")
    await state.update_data(preferred_time=preferred_time)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    async with db_manager.get_session() as session:
        action = UserAction(user_id=callback.from_user.id, action="enter_time")
        session.add(action)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    confirmation_text = messages.REGISTRATION_CONFIRM.format(
        full_name=data['full_name'],
        country=data['country'],
        phone=data['phone'],
        preferred_time=data['preferred_time']
    )
    
    await callback.message.edit_text(confirmation_text)
    await callback.message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(RegistrationStates.confirming_data)
    await callback.answer()

@router.message(RegistrationStates.confirming_data, F.text == messages.BTN_BACK)
async def back_from_confirmation(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    await message.answer(
        messages.REGISTRATION_TIME,
        reply_markup=get_time_selection_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_time)

@router.message(RegistrationStates.confirming_data, F.text == messages.BTN_EDIT)
async def edit_data(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞"""
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.\n\n" + messages.REGISTRATION_NAME,
        reply_markup=get_back_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(RegistrationStates.confirming_data, F.text == messages.BTN_CONFIRM)
async def confirm_registration(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = message.from_user.id
    data = await state.get_data()
    
    async with db_manager.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = (await session.execute(select(BotUser).where(BotUser.user_id == user_id))).scalar_one_or_none()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application = Application(
            user_id=user_id,
            full_name=data['full_name'],
            country=data['country'],
            phone=data['phone'],
            preferred_time=data['preferred_time'],
            source_id=user.source_id if user else None
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        from database import Referral
        referral = await session.query(Referral).filter_by(referred_id=user_id).first()
        if referral:
            application.referrer_id = referral.referrer_id
        
        session.add(application)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            user.has_application = True
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        action = UserAction(user_id=user_id, action="complete_registration")
        session.add(action)
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message = f"""üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å!

üë§ –ò–º—è: {data['full_name']}
üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {data['preferred_time']}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üîó Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {'–î–∞' if referral else '–ù–µ—Ç'}"""
        
        await message.bot.send_message(config.ADMIN_ID, admin_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
        if user and user.source_id:
            source = await session.get(TrafficSource, user.source_id)
            if source:
                from utils.conversions import ConversionSender
                await ConversionSender.send_lead_conversion(application, source)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot_username = (await message.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
    
    await message.answer(
        messages.REGISTRATION_SUCCESS.format(referral_link=referral_link),
        reply_markup=get_reply_keyboard_existing_user()
    )
    
    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π:",
        reply_markup=get_share_referral_keyboard(referral_link)
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
