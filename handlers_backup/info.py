"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
import random

from database import db_manager, Application, Referral, BotUser
from keyboards.keyboards import get_back_button
from utils import messages

router = Router(name="info")

# –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
REVIEWS = [
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ó–∞ 2 –º–µ—Å—è—Ü–∞ —è –Ω–∞—É—á–∏–ª—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 800‚Ç¨ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ. –û—Ç–ª–∏—á–Ω—ã–π –∫—É—Ä—Å!\" - –ê–Ω–¥—Ä–µ–π, –ì–µ—Ä–º–∞–Ω–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –≤–µ—â–µ–π. –£–∂–µ –æ–∫—É–ø–∏–ª–∞ –≤—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\" - –ú–∞—Ä–∏—è, –ò—Å–ø–∞–Ω–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–õ–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ - —ç—Ç–æ –æ–≥—Ä–æ–º–Ω—ã–π –ø–ª—é—Å. –í—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–ª –∏ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\" - –î–º–∏—Ç—Ä–∏–π, –ò—Ç–∞–ª–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ù–∞—á–∞–ª —Å –Ω—É–ª—è, —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –≤ 5000‚Ç¨. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–Ω–∞–Ω–∏—è!\" - –°–µ—Ä–≥–µ–π, –§—Ä–∞–Ω—Ü–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ö—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª –º–æ—é –∂–∏–∑–Ω—å! –£–≤–æ–ª–∏–ª–∞—Å—å —Å –Ω–µ–ª—é–±–∏–º–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞\" - –ï–ª–µ–Ω–∞, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–û—á–µ–Ω—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –í—Å—ë –ø–æ –ø–æ–ª–æ—á–∫–∞–º!\" - –í–∏–∫—Ç–æ—Ä, –ë–µ–ª—å–≥–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–†–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é 1200‚Ç¨/–º–µ—Å—è—Ü\" - –û–ª—å–≥–∞, –ê–≤—Å—Ç—Ä–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–õ—É—á—à–µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏! –û–∫—É–ø–∏–ª –æ–±—É—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü\" - –ü–∞–≤–µ–ª, –®–≤–µ—Ü–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–∏. –û–±—ä—è—Å–Ω—è—é—Ç —Ç–∞–∫, —á—Ç–æ –ø–æ–π–º–µ—Ç –∫–∞–∂–¥—ã–π\" - –ê–Ω–Ω–∞, –ü–æ–ª—å—à–∞",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ë–ª–∞–≥–æ–¥–∞—Ä—è –∫—É—Ä—Å—É —Å–æ–∑–¥–∞–ª –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ 600‚Ç¨ –≤ –º–µ—Å—è—Ü\" - –ò–≥–æ—Ä—å, –ß–µ—Ö–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–°—É–ø–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∞! –ù–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞—é—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ\" - –ù–∞—Ç–∞–ª—å—è, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–¢–µ–ø–µ—Ä—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ - –º–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞\" - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –ì—Ä–µ—Ü–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ñ–∞–ª–µ—é —Ç–æ–ª—å–∫–æ –æ–± –æ–¥–Ω–æ–º - —á—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–Ω—å—à–µ!\" - –ú–∏—Ö–∞–∏–ª, –î–∞–Ω–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–û—Ç —Å—Ç—Ä–∞—Ö–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∏–ø—Ç–æ–π –¥–æ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞ 2 –º–µ—Å—è—Ü–∞\" - –¢–∞—Ç—å—è–Ω–∞, –§–∏–Ω–ª—è–Ω–¥–∏—è",
    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n\"–ö—É—Ä—Å —Å—Ç–æ–∏—Ç –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –¥—Ä—É–∑—å—è–º\" - –í–ª–∞–¥–∏–º–∏—Ä, –õ—é–∫—Å–µ–º–±—É—Ä–≥"
]

@router.callback_query(F.data == "program")
async def show_program(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—É—Ä—Å–∞"""
    await callback.message.edit_text(
        messages.COURSE_PROGRAM,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_PROGRAM)
async def show_program_msg(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        messages.COURSE_PROGRAM,
        reply_markup=get_back_button()
    )

async def show_program(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)"""
    await message.answer(
        messages.COURSE_PROGRAM,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "reviews")
async def show_reviews_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"""
    # –í—ã–±–∏—Ä–∞–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞
    selected_reviews = random.sample(REVIEWS, 4)
    reviews_text = "üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(selected_reviews)
    
    await callback.message.edit_text(
        reviews_text,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_REVIEWS)
async def show_reviews_msg(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    selected_reviews = random.sample(REVIEWS, 4)
    reviews_text = "üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(selected_reviews)
    
    await message.answer(
        reviews_text,
        reply_markup=get_back_button()
    )

async def show_reviews(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)"""
    selected_reviews = random.sample(REVIEWS, 4)
    reviews_text = "üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(selected_reviews)
    
    await message.answer(
        reviews_text,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
    await callback.message.edit_text(
        messages.FAQ_TEXT,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_FAQ)
async def show_faq_msg(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        messages.FAQ_TEXT,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "why_crypto")
async def show_why_crypto(callback: CallbackQuery):
    """–ü–æ—á–µ–º—É –∫—Ä–∏–ø—Ç–æ"""
    await callback.message.edit_text(
        messages.WHY_CRYPTO,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_WHY_CRYPTO)
async def show_why_crypto_msg(message: Message):
    """–ü–æ—á–µ–º—É –∫—Ä–∏–ø—Ç–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        messages.WHY_CRYPTO,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "success_stories")
async def show_success_stories(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞"""
    await callback.message.edit_text(
        messages.SUCCESS_STORIES,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_SUCCESS_STORIES)
async def show_success_stories_msg(message: Message):
    """–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        messages.SUCCESS_STORIES,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "about_course")
async def show_about_course(callback: CallbackQuery):
    """–û –∫—É—Ä—Å–µ"""
    await callback.message.edit_text(
        messages.ABOUT_COURSE,
        reply_markup=get_back_button()
    )
    await callback.answer()

@router.message(F.text == messages.BTN_ABOUT_COURSE)
async def show_about_course_msg(message: Message):
    """–û –∫—É—Ä—Å–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await message.answer(
        messages.ABOUT_COURSE,
        reply_markup=get_back_button()
    )

@router.callback_query(F.data == "referral_info")
async def show_referral_info(callback: CallbackQuery):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
    user_id = callback.from_user.id
    
    async with db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        result = await session.execute(
            select(Application).where(Application.user_id == user_id)
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await callback.answer(
                "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏!",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        result = await session.execute(
            select(func.count(Referral.id)).where(Referral.referrer_id == user_id)
        )
        total_referrals = result.scalar() or 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö 50%
        result = await session.execute(
            select(func.count(Referral.id)).where(
                Referral.referrer_id == user_id,
                Referral.status == 'completed'
            )
        )
        completed_referrals = result.scalar() or 0
        
        earned = completed_referrals * 50
        pending = (total_referrals - completed_referrals) * 50
        
        bot_info = await callback.bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
        
        await callback.message.edit_text(
            messages.REFERRAL_STATS.format(
                total_referrals=total_referrals,
                completed_referrals=completed_referrals,
                earned=earned,
                pending=pending,
                referral_link=referral_link
            ),
            reply_markup=get_back_button()
        )
    
    await callback.answer()

@router.callback_query(F.data == "my_referrals")
async def show_my_referrals_callback(callback: CallbackQuery):
    """–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    
    async with db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        result = await session.execute(
            select(Application).where(Application.user_id == user_id)
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å!",
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        result = await session.execute(
            select(Referral).where(Referral.referrer_id == user_id)
        )
        referrals = result.scalars().all()
        
        if not referrals:
            bot_info = await callback.bot.get_me()
            referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
            
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòî\n\n"
            text += "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n"
            text += f"{referral_link}\n\n"
            text += "–ö–æ–≥–¥–∞ –æ–Ω–∏ –ø—Ä–æ–π–¥—É—Ç 50% –∫—É—Ä—Å–∞, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 50‚Ç¨!"
        else:
            text = f"üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ({len(referrals)}):\n\n"
            
            for i, ref in enumerate(referrals, 1):
                status_emoji = "‚úÖ" if ref.status == 'completed' else "‚è≥"
                text += f"{i}. {status_emoji} –†–µ—Ñ–µ—Ä–∞–ª #{ref.referred_id}\n"
            
            text += f"\n‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: {sum(1 for r in referrals if r.status == 'completed')}"
            text += f"\n‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {sum(1 for r in referrals if r.status != 'completed')}"
        
        await callback.message.edit_text(text, reply_markup=get_back_button())
        await callback.answer()


@router.message(F.text == messages.BTN_REFERRAL)
async def show_referral_msg(message: Message):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_id = message.from_user.id
    
    async with db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        result = await session.execute(
            select(Application).where(Application.user_id == user_id)
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await message.answer(
                "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        result = await session.execute(
            select(func.count(Referral.id)).where(Referral.referrer_id == user_id)
        )
        total_referrals = result.scalar() or 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö 50%
        result = await session.execute(
            select(func.count(Referral.id)).where(
                Referral.referrer_id == user_id,
                Referral.status == 'completed'
            )
        )
        completed_referrals = result.scalar() or 0
        
        earned = completed_referrals * 50
        pending = (total_referrals - completed_referrals) * 50
        
        bot_info = await message.bot.get_me()
        referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
        
        await message.answer(
            messages.REFERRAL_STATS.format(
                total_referrals=total_referrals,
                completed_referrals=completed_referrals,
                earned=earned,
                pending=pending,
                referral_link=referral_link
            ),
            reply_markup=get_back_button()
        )

@router.message(F.text == messages.BTN_MY_REFERRALS)
async def show_my_referrals(message: Message):
    """–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"""
    user_id = message.from_user.id
    
    async with db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        result = await session.execute(
            select(Application).where(Application.user_id == user_id)
        )
        application = result.scalar_one_or_none()
        
        if not application:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        result = await session.execute(
            select(Referral).where(Referral.referrer_id == user_id)
        )
        referrals = result.scalars().all()
        
        if not referrals:
            bot_info = await message.bot.get_me()
            referral_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
            
            await message.answer(
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòî\n\n"
                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n"
                f"{referral_link}\n\n"
                f"–ö–æ–≥–¥–∞ –æ–Ω–∏ –ø—Ä–æ–π–¥—É—Ç 50% –∫—É—Ä—Å–∞, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 50‚Ç¨!"
            )
        else:
            text = f"üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ({len(referrals)}):\n\n"
            
            for i, ref in enumerate(referrals, 1):
                status_emoji = "‚úÖ" if ref.status == 'completed' else "‚è≥"
                text += f"{i}. {status_emoji} –†–µ—Ñ–µ—Ä–∞–ª #{ref.referred_id}\n"
            
            text += f"\n‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: {sum(1 for r in referrals if r.status == 'completed')}"
            text += f"\n‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {sum(1 for r in referrals if r.status != 'completed')}"
            
            await message.answer(text)
