"""
Админ-панель для управления ботом
"""
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, send_file

def format_datetime(dt):
    '''Форматировать datetime для отображения'''
    if dt and hasattr(dt, 'astimezone'):
        return dt.astimezone(TIMEZONE).strftime('%d.%m.%Y %H:%M')
    return '-', redirect, url_for, request, flash, jsonify, send_file
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
import psycopg2
from psycopg2.extras import RealDictCursor
from werkzeug.security import check_password_hash, generate_password_hash
from datetime import datetime, timedelta
import pytz
import os
import requests
import json
import io
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY', 'dev-secret-key')

# Временная зона GMT+3 (Москва)
TIMEZONE = pytz.timezone('Europe/Moscow')

def get_local_time():
    '''Получить текущее время в GMT+3'''
    return datetime.now(TIMEZONE)

# Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@app.template_filter('datetime')
def datetime_filter(dt):
    return format_datetime(dt)

# Подключение к БД
def get_db_connection():
    """Получить синхронное подключение к БД"""
    return psycopg2.connect(
        host='localhost',
        database='crypto_course_db',
        user='cryptobot',
        password='kuboeb1A',
        cursor_factory=RealDictCursor
    )

class Admin:
    def __init__(self, id, username):
        self.id = id
        self.username = username
        self.is_authenticated = True
        self.is_active = True
        self.is_anonymous = False
    
    def get_id(self):
        return str(self.id)

@login_manager.user_loader
def load_user(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, username FROM admins WHERE id = %s", (int(user_id),))
    admin_data = cur.fetchone()
    cur.close()
    conn.close()
    
    if admin_data:
        return Admin(admin_data['id'], admin_data['username'])
    return None

@app.route('/')
@app.route('/admin')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, username, password_hash FROM admins WHERE username = %s", (username,))
        admin_data = cur.fetchone()
        cur.close()
        conn.close()
        
        if admin_data and check_password_hash(admin_data['password_hash'], password):
            admin = Admin(admin_data['id'], admin_data['username'])
            login_user(admin)
            return redirect(url_for('dashboard'))
        else:
            flash('Неверный логин или пароль', 'error')
    
    return render_template('login.html')

@app.route('/dashboard')
@login_required
def dashboard():
    conn = get_db_connection()
    cur = conn.cursor()
    
    # Статистика за сегодня
    today = get_local_time().date()
    cur.execute("""
        SELECT COUNT(*) as count FROM applications 
        WHERE DATE(created_at) = %s
    """, (today,))
    today_count = cur.fetchone()['count']
    
    # Статистика за неделю
    week_ago = today - timedelta(days=7)
    cur.execute("""
        SELECT COUNT(*) as count FROM applications 
        WHERE created_at >= %s
    """, (week_ago,))
    week_count = cur.fetchone()['count']
    
    # Статистика за месяц
    month_ago = today - timedelta(days=30)
    cur.execute("""
        SELECT COUNT(*) as count FROM applications 
        WHERE created_at >= %s
    """, (month_ago,))
    month_count = cur.fetchone()['count']
    
    # Последние 10 заявок
    cur.execute("""
        SELECT * FROM applications 
        ORDER BY created_at DESC 
        LIMIT 10
    """)
    recent_applications = cur.fetchall()
    
    # Конверсия
    cur.execute("SELECT COUNT(*) as count FROM bot_users WHERE first_seen >= %s", (week_ago,))
    total_users = cur.fetchone()['count']
    conversion_rate = (week_count / total_users * 100) if total_users > 0 else 0
    
    # Данные для графика
    chart_labels = []
    chart_data = []
    for i in range(7):
        date = today - timedelta(days=6-i)
        chart_labels.append(date.strftime('%d.%m'))
        cur.execute("""
            SELECT COUNT(*) as count FROM applications 
            WHERE DATE(created_at) = %s
        """, (date,))
        chart_data.append(cur.fetchone()['count'])
    
    # Получаем данные воронки
    funnel_stats = {}
    
    # Начали регистрацию
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'begin_registration' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['start'] = result['count'] if result else 0
    
    # Ввели имя
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'enter_name' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['begin_registration'] = result['count'] if result else 0
    
    # Ввели страну
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'enter_country' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['entered_country'] = result['count'] if result else 0
    
    # Ввели телефон
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'enter_phone' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['entered_phone'] = result['count'] if result else 0
    
    # Выбрали время
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'enter_time' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['entered_time'] = result['count'] if result else 0
    
    # Завершили регистрацию
    cur.execute("""
        SELECT COUNT(DISTINCT user_id) as count FROM user_actions 
        WHERE action = 'completed' AND created_at >= %s
    """, (week_ago,))
    result = cur.fetchone()
    funnel_stats['complete_registration'] = result['count'] if result else 0
    
    cur.close()
    conn.close()
    
    return render_template('dashboard.html',
        today_count=today_count,
        week_count=week_count,
        month_count=month_count,
        recent_applications=recent_applications,
        conversion_rate=conversion_rate,
        chart_labels=chart_labels,
        chart_data=chart_data,
        bot_status={'enabled': True, 'uptime': '2д 14ч 35м'},
        funnel_stats=funnel_stats
    )

@app.route('/applications')
@login_required
def applications():
    conn = get_db_connection()
    cur = conn.cursor()
    
    # Параметры
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)
    if per_page not in [10, 20, 50, 100]:
        per_page = 50
    
    search = request.args.get('search', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    country = request.args.get('country', '')
    source_type = request.args.get('source_type', '')
    preferred_time = request.args.get('preferred_time', '')
    
    # Базовый запрос
    base_query = """
        FROM applications a
        LEFT JOIN bot_users u ON a.user_id = u.user_id
        WHERE 1=1
    """
    params = []
    
    # Фильтры
    if search:
        base_query += " AND (LOWER(a.full_name) LIKE LOWER(%s) OR a.phone LIKE %s)"
        params.extend([f'%{search}%', f'%{search}%'])
    
    if date_from:
        base_query += " AND a.created_at >= %s"
        params.append(date_from)
    
    if date_to:
        base_query += " AND a.created_at <= %s"
        params.append(date_to + ' 23:59:59')
    
    if country:
        base_query += " AND LOWER(a.country) LIKE LOWER(%s)"
        params.append(f'%{country}%')
    
    if source_type:
        if source_type == 'direct':
            base_query += " AND a.referrer_id IS NULL AND a.source_id IS NULL"
        elif source_type == 'referral':
            base_query += " AND a.referrer_id IS NOT NULL"
        elif source_type == 'source':
            base_query += " AND a.source_id IS NOT NULL"
    
    if preferred_time:
        base_query += " AND a.preferred_time = %s"
        params.append(preferred_time)
    
    # Подсчет общего количества
    count_query = "SELECT COUNT(*) as total " + base_query
    cur.execute(count_query, params)
    total_count = cur.fetchone()['total']
    total_pages = (total_count + per_page - 1) // per_page if per_page > 0 else 1
    
    # Корректировка страницы
    if page > total_pages:
        page = total_pages
    if page < 1:
        page = 1
    
    # Получение данных с пагинацией
    offset = (page - 1) * per_page
    data_query = """
        SELECT a.*, 
               u.username,
               CASE 
                   WHEN a.referrer_id IS NOT NULL THEN 'Реферал'
                   WHEN a.source_id IS NOT NULL THEN 'Источник ' || a.source_id
                   ELSE 'Прямой'
               END as source_type,
               CASE 
                   WHEN a.referrer_id IS NOT NULL THEN 
                       (SELECT username FROM bot_users WHERE user_id = a.referrer_id LIMIT 1)
                   ELSE NULL
               END as referrer_username,
               EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - a.created_at))/3600 as hours_ago
    """ + base_query + " ORDER BY a.created_at DESC LIMIT %s OFFSET %s"
    params.extend([per_page, offset])
    
    cur.execute(data_query, params)
    applications = cur.fetchall()
    
    # Статистика
    today = get_local_time().date()
    cur.execute("SELECT COUNT(*) as count FROM applications WHERE DATE(created_at) = %s", (today,))
    today_count = cur.fetchone()['count']
    
    week_ago = today - timedelta(days=7)
    cur.execute("SELECT COUNT(*) as count FROM applications WHERE created_at >= %s", (week_ago,))
    week_applications = cur.fetchone()['count']
    cur.execute("SELECT COUNT(*) as count FROM bot_users WHERE first_seen >= %s", (week_ago,))
    week_users = cur.fetchone()['count']
    conversion_rate = (week_applications / week_users * 100) if week_users > 0 else 0
    
    # Список стран
    cur.execute("SELECT DISTINCT country FROM applications WHERE country IS NOT NULL ORDER BY country")
    countries = [row['country'] for row in cur.fetchall()]
    
    cur.close()
    conn.close()
    
    # Вычисляем диапазон страниц для отображения
    page_range = []
    if total_pages <= 7:
        page_range = list(range(1, total_pages + 1))
    else:
        page_range = [1]
        if page > 3:
            page_range.append('...')
        for p in range(max(2, page - 1), min(page + 2, total_pages)):
            page_range.append(p)
        if page < total_pages - 2:
            page_range.append('...')
        if total_pages > 1:
            page_range.append(total_pages)
    
    return render_template('applications.html', 
                         applications=applications,
                         page=page,
                         total_pages=total_pages,
                         total_count=total_count,
                         per_page=per_page,
                         page_range=page_range,
                         today_count=today_count,
                         conversion_rate=conversion_rate,
                         countries=countries)

@app.route('/export_applications')
@login_required
def export_applications():
    import xlsxwriter
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    # Те же фильтры что и в applications()
    search = request.args.get('search', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    country = request.args.get('country', '')
    source_type = request.args.get('source_type', '')
    preferred_time = request.args.get('preferred_time', '')
    
    query = """
        SELECT a.*, 
               u.username,
               CASE 
                   WHEN a.referrer_id IS NOT NULL THEN 'Реферал'
                   WHEN a.source_id IS NOT NULL THEN 'Источник ' || a.source_id
                   ELSE 'Прямой'
               END as source_type
        FROM applications a
        LEFT JOIN bot_users u ON a.user_id = u.user_id
        WHERE 1=1
    """
    params = []
    
    if search:
        query += " AND (LOWER(a.full_name) LIKE LOWER(%s) OR a.phone LIKE %s)"
        params.extend([f'%{search}%', f'%{search}%'])
    
    if date_from:
        query += " AND a.created_at >= %s"
        params.append(date_from)
    
    if date_to:
        query += " AND a.created_at <= %s"
        params.append(date_to + ' 23:59:59')
    
    if country:
        query += " AND LOWER(a.country) LIKE LOWER(%s)"
        params.append(f'%{country}%')
    
    if source_type:
        if source_type == 'direct':
            query += " AND a.referrer_id IS NULL AND a.source_id IS NULL"
        elif source_type == 'referral':
            query += " AND a.referrer_id IS NOT NULL"
        elif source_type == 'source':
            query += " AND a.source_id IS NOT NULL"
    
    if preferred_time:
        query += " AND a.preferred_time = %s"
        params.append(preferred_time)
    
    query += " ORDER BY a.created_at DESC"
    
    cur.execute(query, params)
    applications = cur.fetchall()
    cur.close()
    conn.close()
    
    # Создаем Excel
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(output)
    worksheet = workbook.add_worksheet('Заявки')
    
    # Заголовки
    headers = ['ID', 'Имя', 'Username', 'Страна', 'Телефон', 'Время звонка', 'Дата создания', 'Источник']
    for col, header in enumerate(headers):
        worksheet.write(0, col, header)
    
    # Данные
    for row, app in enumerate(applications, 1):
        worksheet.write(row, 0, app['id'])
        worksheet.write(row, 1, app['full_name'])
        worksheet.write(row, 2, f"@{app['username']}" if app['username'] else '-')
        worksheet.write(row, 3, app['country'])
        worksheet.write(row, 4, app['phone'])
        worksheet.write(row, 5, app['preferred_time'])
        worksheet.write(row, 6, format_datetime(app['created_at']))
        worksheet.write(row, 7, app['source_type'])
    
    workbook.close()
    output.seek(0)
    
    return send_file(
        output,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        as_attachment=True,
        download_name=f'applications_{get_local_time().strftime("%Y%m%d_%H%M%S")}.xlsx'
    )

@app.route('/users')
@login_required
def users():
    conn = get_db_connection()
    cur = conn.cursor()
    
    # Параметры
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)
    if per_page not in [10, 20, 50, 100]:
        per_page = 50
        
    search = request.args.get('search', '')
    has_application = request.args.get('has_application', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    
    # Базовый запрос
    base_query = """
        FROM bot_users u
        LEFT JOIN applications a ON u.user_id = a.user_id
        LEFT JOIN referrals r ON u.user_id = r.referrer_id
        WHERE 1=1
    """
    params = []
    
    # Фильтры
    if search:
        base_query += " AND (u.username ILIKE %s OR CAST(u.user_id AS TEXT) LIKE %s)"
        params.extend([f'%{search}%', f'%{search}%'])
    
    if date_from:
        base_query += " AND u.first_seen >= %s"
        params.append(date_from)
    
    if date_to:
        base_query += " AND u.first_seen <= %s"
        params.append(date_to + ' 23:59:59')
    
    # Группировка для подсчета
    group_by = " GROUP BY u.id, u.user_id, u.username, u.first_seen, u.last_activity, u.source_id, u.has_application, u.is_blocked"
    
    # Фильтр по наличию заявки
    having_clause = ""
    if has_application == '1':
        having_clause = " HAVING COUNT(DISTINCT a.id) > 0"
    elif has_application == '0':
        having_clause = " HAVING COUNT(DISTINCT a.id) = 0"
    
    # Подсчет общего количества
    count_query = "SELECT COUNT(*) as total FROM (SELECT u.id " + base_query + group_by + having_clause + ") as subquery"
    cur.execute(count_query, params)
    total_count = cur.fetchone()['total']
    total_pages = (total_count + per_page - 1) // per_page if per_page > 0 else 1
    
    # Корректировка страницы
    if page > total_pages:
        page = total_pages
    if page < 1:
        page = 1
    
    # Получение данных с пагинацией
    offset = (page - 1) * per_page
    data_query = """
        SELECT u.*, 
               COUNT(DISTINCT a.id) as has_application,
               COUNT(DISTINCT r.referred_id) as referrals_count
    """ + base_query + group_by + having_clause + " ORDER BY u.first_seen DESC LIMIT %s OFFSET %s"
    params.extend([per_page, offset])
    
    cur.execute(data_query, params)
    users = cur.fetchall()
    
    # Общее количество всех пользователей
    cur.execute("SELECT COUNT(*) as count FROM bot_users")
    all_users_count = cur.fetchone()['count']
    
    cur.close()
    conn.close()
    
    # Вычисляем диапазон страниц для отображения
    page_range = []
    if total_pages <= 7:
        page_range = list(range(1, total_pages + 1))
    else:
        page_range = [1]
        if page > 3:
            page_range.append('...')
        for p in range(max(2, page - 1), min(page + 2, total_pages)):
            page_range.append(p)
        if page < total_pages - 2:
            page_range.append('...')
        if total_pages > 1:
            page_range.append(total_pages)
    
    return render_template('users.html', 
                         users=users,
                         page=page,
                         total_pages=total_pages,
                         total_count=total_count,
                         all_users_count=all_users_count,
                         per_page=per_page,
                         page_range=page_range)

@app.route('/export_users')
@login_required
def export_users():
    import xlsxwriter
    
    # Получаем те же данные с фильтрами
    conn = get_db_connection()
    cur = conn.cursor()
    
    search = request.args.get('search', '')
    has_application = request.args.get('has_application', '')
    date_from = request.args.get('date_from', '')
    date_to = request.args.get('date_to', '')
    
    query = """
        SELECT u.*, 
               COUNT(DISTINCT a.id) as has_application,
               COUNT(DISTINCT r.referred_id) as referrals_count
        FROM bot_users u
        LEFT JOIN applications a ON u.user_id = a.user_id
        LEFT JOIN referrals r ON u.user_id = r.referrer_id
        WHERE 1=1
    """
    params = []
    
    if search:
        query += " AND (u.username ILIKE %s OR CAST(u.user_id AS TEXT) LIKE %s)"
        params.extend([f'%{search}%', f'%{search}%'])
    
    if date_from:
        query += " AND u.first_seen >= %s"
        params.append(date_from)
    
    if date_to:
        query += " AND u.first_seen <= %s"
        params.append(date_to + ' 23:59:59')
    
    query += " GROUP BY u.id, u.user_id, u.username, u.first_seen, u.last_activity, u.source_id, u.has_application, u.is_blocked"
    
    if has_application == '1':
        query += " HAVING COUNT(DISTINCT a.id) > 0"
    elif has_application == '0':
        query += " HAVING COUNT(DISTINCT a.id) = 0"
    
    query += " ORDER BY u.first_seen DESC"
    
    cur.execute(query, params)
    users = cur.fetchall()
    cur.close()
    conn.close()
    
    # Создаем Excel файл в памяти
    output = io.BytesIO()
    workbook = xlsxwriter.Workbook(output)
    worksheet = workbook.add_worksheet('Пользователи')
    
    # Заголовки
    headers = ['ID', 'Имя', 'Username', 'Страна', 'Телефон', 'Время звонка', 'Дата создания', 'Источник']
    for col, header in enumerate(headers):
        worksheet.write(0, col, header)
    
    # Данные
    for row, user in enumerate(users, 1):
        worksheet.write(row, 0, user['id'])
        worksheet.write(row, 1, str(user['user_id']))
        worksheet.write(row, 2, user['username'] or '-')
        worksheet.write(row, 3, user['first_seen'].strftime('%d.%m.%Y %H:%M') if user['first_seen'] else '-')
        worksheet.write(row, 4, user['last_activity'].strftime('%d.%m.%Y %H:%M') if user['last_activity'] else '-')
        worksheet.write(row, 5, 'Да' if user['has_application'] > 0 else 'Нет')
        worksheet.write(row, 6, user['referrals_count'])
        worksheet.write(row, 7, f"Источник {user['source_id']}" if user['source_id'] else 'Прямой')
    
    workbook.close()
    output.seek(0)
    
    return send_file(
        output,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        as_attachment=True,
        download_name=f'users_{get_local_time().strftime("%Y%m%d_%H%M%S")}.xlsx'
    )

@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])
@login_required
def delete_user(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Удаляем в правильном порядке из-за foreign keys
        cur.execute("DELETE FROM user_actions WHERE user_id = %s", (user_id,))
        cur.execute("DELETE FROM referrals WHERE referrer_id = %s OR referred_id = %s", (user_id, user_id))
        cur.execute("DELETE FROM applications WHERE user_id = %s", (user_id,))
        cur.execute("DELETE FROM bot_users WHERE user_id = %s", (user_id,))
        
        conn.commit()
        return jsonify({'status': 'success'})
    except Exception as e:
        conn.rollback()
        return jsonify({'status': 'error', 'message': str(e)}), 500
    finally:
        cur.close()
        conn.close()

@app.route('/editor')
@login_required
def text_editor():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM bot_texts ORDER BY category, key")
    texts = cur.fetchall()
    cur.close()
    conn.close()
    
    return render_template('editor.html', texts=texts)

@app.route('/admin/texts/<int:text_id>')
@login_required
def get_text(text_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM bot_texts WHERE id = %s", (text_id,))
    text = cur.fetchone()
    cur.close()
    conn.close()
    
    if text:
        # Конвертируем в обычный dict для JSON
        text_dict = {
            'id': text['id'],
            'key': text['key'],
            'category': text['category'],
            'description': text['description'],
            'text': text['text']
        }
        return jsonify(text_dict)
    return jsonify({'error': 'Text not found'}), 404

@app.route('/admin/texts/<int:text_id>/update', methods=['POST'])
@login_required
def update_text(text_id):
    data = request.get_json()
    text_content = data.get('text') if data else None
    
    if not text_content:
        return jsonify({'error': 'Text is required'}), 400
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            UPDATE bot_texts 
            SET text = %s, updated_at = CURRENT_TIMESTAMP, updated_by = %s
            WHERE id = %s
        """, (text_content, current_user.id, text_id))
        
        conn.commit()
        return jsonify({'status': 'success'})
    except Exception as e:
        conn.rollback()
        return jsonify({'error': str(e)}), 500
    finally:
        cur.close()
        conn.close()

@app.route('/api/texts/<key>')
def get_text_by_key(key):
    # Простая защита по API ключу
    api_key = request.headers.get('X-API-Key')
    if api_key != 'internal-bot-key-2024':
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT text FROM bot_texts WHERE key = %s", (key,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    
    if result:
        return jsonify({'text': result['text']})
    return jsonify({'error': 'Text not found'}), 404

@app.route('/system')
@login_required
def system():
    return render_template('system.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Создадим начального админа если его нет
def init_admin():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id FROM admins WHERE username = 'admin'")
    if not cur.fetchone():
        password_hash = generate_password_hash('kuboeb1A')
        cur.execute(
            "INSERT INTO admins (username, password_hash) VALUES (%s, %s)",
            ('admin', password_hash)
        )
        conn.commit()
        print("Admin user created")
    cur.close()
    conn.close()


# ===== ИСТОЧНИКИ ТРАФИКА =====

@app.route('/traffic-sources')
@login_required
def traffic_sources():
    """Страница управления источниками трафика"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем все источники с статистикой
        cur.execute("""
            SELECT 
                ts.*,
                COUNT(DISTINCT CASE WHEN te.event_type = 'click' THEN te.user_id END) as clicks,
                COUNT(DISTINCT CASE WHEN te.event_type = 'start' THEN te.user_id END) as starts,
                COUNT(DISTINCT CASE WHEN te.event_type = 'lead' THEN te.user_id END) as leads,
                COUNT(DISTINCT uc.user_id) as users_with_clickid
            FROM traffic_sources ts
            LEFT JOIN tracking_events te ON ts.id = te.source_id
            LEFT JOIN user_click_ids uc ON ts.id = uc.source_id
            GROUP BY ts.id
            ORDER BY ts.created_at DESC
        """)
        sources = cur.fetchall()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        # Информация о платформах
        platforms = {
            'facebook': {'name': 'Facebook Ads', 'color': 'primary'},
            'google': {'name': 'Google Ads', 'color': 'success'},
            'tiktok': {'name': 'TikTok Ads', 'color': 'dark'},
            'telegram_ads': {'name': 'Telegram Ads', 'color': 'info'},
            'onclick': {'name': 'OnClick', 'color': 'warning'},
            'richads': {'name': 'RichAds', 'color': 'danger'},
            'pushhouse': {'name': 'PushHouse', 'color': 'secondary'},
            'evadav': {'name': 'EvaDav', 'color': 'success'},
            'propeller': {'name': 'PropellerAds', 'color': 'primary'}
        }
        
        for source in sources:
            platform = platforms.get(source['platform'], {'name': source['platform'], 'color': 'secondary'})
            source['platform_name'] = platform['name']
            source['platform_color'] = platform['color']
            
            # Считаем конверсию
            if source['clicks'] > 0:
                source['cr'] = round(source['leads'] / source['clicks'] * 100, 2)
            else:
                source['cr'] = 0
        
        return render_template('traffic_sources.html', sources=sources, platforms=platforms)
        
    except Exception as e:
        flash(f'Ошибка: {str(e)}', 'danger')
        return redirect(url_for('dashboard'))
    finally:
        cur.close()
        conn.close()

@app.route('/traffic-sources/create', methods=['GET', 'POST'])
@login_required
def create_traffic_source():
    """Создание нового источника трафика"""
    if request.method == 'POST':
        data = request.get_json()
        
        conn = get_db_connection()
        cur = conn.cursor()
        
        try:
            # Генерируем уникальный код
            import random
            import string
            platform = data['platform']
            random_code = ''.join(random.choices(string.digits, k=5))
            source_code = f"{platform[:2]}_{random_code}"
        
        except Exception as e:
        
            print(f'Error: {e}')
            
            # Генерируем ссылку
            bot_username = os.getenv('BOT_USERNAME', 'cryplace_bot')
            link = f"https://t.me/{bot_username}?start=src_{source_code}"
            
            # Сохраняем
            cur.execute("""
                INSERT INTO traffic_sources (name, platform, source_code, settings, link)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING id
            """, (data['name'], platform, source_code, json.dumps(data.get('settings', {})), link))
            
            source_id = cur.fetchone()['id']
            conn.commit()
            
            return jsonify({
                'success': True,
                'id': source_id,
                'link': link,
                'source_code': source_code
            })
            
        except Exception as e:
            conn.rollback()
            return jsonify({'success': False, 'error': str(e)})
        finally:
            cur.close()
            conn.close()
    
    return render_template('create_traffic_source.html')

@app.route('/traffic-sources/<int:source_id>/details')
@login_required
def traffic_source_details(source_id):
    """Детальная информация об источнике"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем источник
        cur.execute("SELECT * FROM traffic_sources WHERE id = %s", (source_id,))
        source = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if not source:
            flash('Источник не найден', 'danger')
            return redirect(url_for('traffic_sources'))
        
        # Статистика по дням
        cur.execute("""
            SELECT 
                DATE(created_at) as date,
                COUNT(DISTINCT CASE WHEN event_type = 'click' THEN user_id END) as clicks,
                COUNT(DISTINCT CASE WHEN event_type = 'start' THEN user_id END) as starts,
                COUNT(DISTINCT CASE WHEN event_type = 'lead' THEN user_id END) as leads
            FROM tracking_events
            WHERE source_id = %s
            AND created_at >= CURRENT_DATE - INTERVAL '30 days'
            GROUP BY DATE(created_at)
            ORDER BY date DESC
        """, (source_id,))
        daily_stats = cur.fetchall()
        
        # Последние конверсии
        cur.execute("""
            SELECT 
                cl.*,
                a.full_name,
                a.phone,
                u.username
            FROM conversion_logs cl
            LEFT JOIN applications a ON cl.application_id = a.id
            LEFT JOIN bot_users u ON cl.user_id = u.user_id
            WHERE cl.source_id = %s
            ORDER BY cl.created_at DESC
            LIMIT 50
        """, (source_id,))
        conversions = cur.fetchall()
        
        # Click IDs
        cur.execute("""
            SELECT 
                uc.*,
                u.username
            FROM user_click_ids uc
            LEFT JOIN bot_users u ON uc.user_id = u.user_id
            WHERE uc.source_id = %s
            ORDER BY uc.created_at DESC
            LIMIT 50
        """, (source_id,))
        click_ids = cur.fetchall()
        
        return render_template('traffic_source_details.html',
                             source=source,
                             daily_stats=daily_stats,
                             conversions=conversions,
                             click_ids=click_ids)
        
    except Exception as e:
        flash(f'Ошибка: {str(e)}', 'danger')
        return redirect(url_for('traffic_sources'))
    finally:
        cur.close()
        conn.close()

@app.route('/traffic-sources/<int:source_id>/test-conversion', methods=['POST'])
@login_required
def test_conversion(source_id):
    """Тест конверсии"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем источник
        cur.execute("SELECT * FROM traffic_sources WHERE id = %s", (source_id,))
        source = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if not source:
            return jsonify({'success': False, 'error': 'Источник не найден'})
        
        # Создаем тестовую запись
        cur.execute("""
            INSERT INTO conversion_logs 
            (source_id, user_id, platform, request_data, response_data, status)
            VALUES (%s, 0, %s, %s, %s, 'test')
        """, (
            source_id,
            source['platform'],
            json.dumps({'test': True, 'timestamp': datetime.now().isoformat()}),
            json.dumps({'status': 'simulated', 'message': 'Test conversion'})
        ))
        
        conn.commit()
        
        return jsonify({
            'success': True,
            'message': f'Тестовая конверсия для {source["platform"]} создана'
        })
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()

@app.route('/traffic-sources/<int:source_id>/toggle', methods=['POST'])
@login_required
def toggle_traffic_source(source_id):
    """Включить/выключить источник"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            UPDATE traffic_sources 
            SET is_active = NOT is_active 
            WHERE id = %s
            RETURNING is_active
        """, (source_id,))
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        result = cur.fetchone()
        conn.commit()
        
        return jsonify({
            'success': True,
            'is_active': result['is_active']
        })
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()


@app.route('/traffic-sources/<int:source_id>/delete', methods=['POST'])
@login_required
def delete_traffic_source(source_id):
    """Удалить источник трафика"""
    print(f"Delete request for source {source_id}")
    print(f"Request method: {request.method}")
    print(f"Request headers: {dict(request.headers)}")
    
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Проверяем, есть ли связанные данные
        cur.execute("""
            SELECT COUNT(*) as count FROM tracking_events WHERE source_id = %s
        """, (source_id,))
        events_count = cur.fetchone()['count']
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if events_count > 0:
            # Если есть события, предупреждаем
            return jsonify({
                'success': False,
                'error': f'Невозможно удалить источник. Связано событий: {events_count}',
                'confirm_required': True,
                'events_count': events_count
            })
        
        # Удаляем источник
        cur.execute("DELETE FROM traffic_sources WHERE id = %s", (source_id,))
        conn.commit()
        
        return jsonify({'success': True})
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()


@app.route('/traffic-sources/<int:source_id>/force-delete', methods=['POST'])
@login_required
def force_delete_traffic_source(source_id):
    """Принудительно удалить источник со всеми связанными данными"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Удаляем в правильном порядке из-за foreign keys
        cur.execute("DELETE FROM conversion_logs WHERE source_id = %s", (source_id,))
        cur.execute("DELETE FROM user_click_ids WHERE source_id = %s", (source_id,))
        cur.execute("DELETE FROM tracking_events WHERE source_id = %s", (source_id,))
        cur.execute("UPDATE applications SET source_id = NULL WHERE source_id = %s", (source_id,))
        cur.execute("UPDATE bot_users SET source_id = NULL WHERE source_id = %s", (source_id,))
        cur.execute("DELETE FROM traffic_sources WHERE id = %s", (source_id,))
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        conn.commit()
        
        return jsonify({'success': True})
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()




# ===== РАССЫЛКИ =====

@app.route('/broadcast')
@login_required
def broadcast():
    """Страница управления рассылками"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем статистику пользователей
        cur.execute("""
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN has_application = TRUE THEN 1 END) as with_application,
                COUNT(CASE WHEN has_application = FALSE THEN 1 END) as without_application,
                COUNT(CASE WHEN last_activity > CURRENT_TIMESTAMP - INTERVAL '7 days' THEN 1 END) as active_week,
                COUNT(CASE WHEN last_activity > CURRENT_TIMESTAMP - INTERVAL '30 days' THEN 1 END) as active_month
            FROM bot_users
            WHERE is_blocked = FALSE
        """)
        stats = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        # Получаем историю рассылок
        cur.execute("""
            SELECT * FROM broadcasts 
            ORDER BY created_at DESC 
            LIMIT 20
        """)
        broadcasts = cur.fetchall()
        
        return render_template('broadcast.html', stats=stats, broadcasts=broadcasts)
        
    except Exception as e:
        flash(f'Ошибка: {str(e)}', 'danger')
        return redirect(url_for('dashboard'))
    finally:
        cur.close()
        conn.close()

@app.route('/broadcast/create', methods=['GET', 'POST'])
@login_required
def create_broadcast():
    """Создание новой рассылки"""
    if request.method == 'POST':
        data = request.get_json()
        
        conn = get_db_connection()
        cur = conn.cursor()
        
        try:
            # Получаем список получателей по фильтрам
            filters = data.get('filters', {})
            query = """
                SELECT user_id, username 
                FROM bot_users 
                WHERE is_blocked = FALSE
            """
            params = []
        
        except Exception as e:
        
            print(f'Error: {e}')
            
            if filters.get('has_application') == 'no':
                query += " AND has_application = FALSE"
            elif filters.get('has_application') == 'yes':
                query += " AND has_application = TRUE"
            
            if filters.get('activity'):
                if filters['activity'] == 'week':
                    query += " AND last_activity > CURRENT_TIMESTAMP - INTERVAL '7 days'"
                elif filters['activity'] == 'month':
                    query += " AND last_activity > CURRENT_TIMESTAMP - INTERVAL '30 days'"
                elif filters['activity'] == 'inactive':
                    query += " AND last_activity < CURRENT_TIMESTAMP - INTERVAL '30 days'"
            
            if filters.get('registration_from'):
                query += " AND first_seen >= %s"
                params.append(filters['registration_from'])
            
            if filters.get('registration_to'):
                query += " AND first_seen <= %s"
                params.append(filters['registration_to'])
            
            cur.execute(query, params)
            recipients = cur.fetchall()
            
            broadcast_type = data.get('broadcast_type', 'single')
            
            # Если это сценарий, получаем первое сообщение
            message = data.get('message', '')
            scenario_type = None
            
            if broadcast_type == 'scenario':
                scenario_type = data.get('scenario_type')
                # Получаем сценарий из БД
                cur.execute("""
                    SELECT steps FROM warming_scenarios 
                    WHERE name = %s
                """, (scenario_type,))
                scenario = cur.fetchone()
                
                if scenario and scenario['steps']:
                    # Берем первое сообщение из сценария
                    first_step = scenario['steps'][0]
                    message = first_step.get('message', '')
            
            # Определяем время отправки
            scheduled_at = None
            if data.get('schedule_type') == 'scheduled':
                scheduled_at = data.get('scheduled_at')
            
            # Создаем рассылку
            cur.execute("""
                INSERT INTO broadcasts 
                (name, message, target_audience, recipient_count, status, 
                 scenario_type, schedule_type, scheduled_at, next_run_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                data['name'],
                message,
                json.dumps(filters),
                len(recipients),
                'scheduled' if scheduled_at else 'pending',
                scenario_type,
                data.get('repeat_type', 'once'),
                scheduled_at,
                scheduled_at  # next_run_at = scheduled_at для первого запуска
            ))
            
            broadcast_id = cur.fetchone()['id']
            
            # Сохраняем получателей
            for recipient in recipients:
                cur.execute("""
                    INSERT INTO broadcast_recipients (broadcast_id, user_id, status)
                    VALUES (%s, %s, 'pending')
                """, (broadcast_id, recipient['user_id']))
            
            conn.commit()
            
            return jsonify({
                'success': True,
                'broadcast_id': broadcast_id,
                'recipient_count': len(recipients)
            })
            
        except Exception as e:
            conn.rollback()
            return jsonify({'success': False, 'error': str(e)})
        finally:
            cur.close()
            conn.close()
    
    return render_template('create_broadcast.html')

@app.route('/broadcast/<int:broadcast_id>/send', methods=['POST'])
@login_required
def send_broadcast(broadcast_id):
    """Запуск рассылки"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем данные рассылки
        cur.execute("SELECT * FROM broadcasts WHERE id = %s", (broadcast_id,))
        broadcast = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if not broadcast:
            return jsonify({'success': False, 'error': 'Рассылка не найдена'})
        
        # Обновляем статус на "отправляется"
        cur.execute("""
            UPDATE broadcasts 
            SET status = 'sending', started_at = CURRENT_TIMESTAMP
            WHERE id = %s
        """, (broadcast_id,))
        conn.commit()
        
        # Получаем получателей
        cur.execute("""
            SELECT br.*, bu.username
            FROM broadcast_recipients br
            JOIN bot_users bu ON br.user_id = bu.user_id
            WHERE br.broadcast_id = %s AND br.status = 'pending'
        """, (broadcast_id,))
        recipients = cur.fetchall()
        
        # Импортируем необходимые модули для отправки
        import requests
        import time
        
        bot_token = os.getenv('BOT_TOKEN')
        api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        sent_count = 0
        error_count = 0
        
        # Отправляем сообщения
        for recipient in recipients:
            try:
                # Персонализация сообщения
                message = broadcast['message']
            except Exception as e:
                print(f'Error: {e}')
                if recipient['username']:
                    message = message.replace('{username}', f"@{recipient['username']}")
                
                # Отправка через Telegram API
                response = requests.post(api_url, json={
                    'chat_id': recipient['user_id'],
                    'text': message,
                    'parse_mode': 'HTML'
                }, timeout=10)
                
                if response.status_code == 200:
                    # Обновляем статус получателя
                    cur.execute("""
                        UPDATE broadcast_recipients
                        SET status = 'sent', sent_at = CURRENT_TIMESTAMP
                        WHERE broadcast_id = %s AND user_id = %s
                    """, (broadcast_id, recipient['user_id']))
                    sent_count += 1
                else:
                    # Сохраняем ошибку
                    error_msg = response.json().get('description', 'Unknown error')
                    cur.execute("""
                        UPDATE broadcast_recipients
                        SET status = 'error', error_message = %s
                        WHERE broadcast_id = %s AND user_id = %s
                    """, (error_msg, broadcast_id, recipient['user_id']))
                    error_count += 1
                
                # Коммитим каждые 10 сообщений
                if (sent_count + error_count) % 10 == 0:
                    conn.commit()
                
                # Задержка между сообщениями (30 сообщений в секунду)
                time.sleep(0.035)
                
            except Exception as e:
                cur.execute("""
                    UPDATE broadcast_recipients
                    SET status = 'error', error_message = %s
                    WHERE broadcast_id = %s AND user_id = %s
                """, (str(e), broadcast_id, recipient['user_id']))
                error_count += 1
        
        # Обновляем статистику рассылки
        cur.execute("""
            UPDATE broadcasts 
            SET status = 'sent', 
                completed_at = CURRENT_TIMESTAMP,
                sent_count = %s,
                error_count = %s
            WHERE id = %s
        """, (sent_count, error_count, broadcast_id))
        
        conn.commit()
        
        return jsonify({
            'success': True, 
            'sent': sent_count, 
            'errors': error_count
        })
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()

@app.route('/broadcast/<int:broadcast_id>/stats')
@login_required
def broadcast_stats(broadcast_id):
    """Статистика рассылки"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем данные рассылки
        cur.execute("SELECT * FROM broadcasts WHERE id = %s", (broadcast_id,))
        broadcast = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if not broadcast:
            flash('Рассылка не найдена', 'danger')
            return redirect(url_for('broadcast'))
        
        # Получаем статистику по получателям
        cur.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent,
                COUNT(CASE WHEN delivered_at IS NOT NULL THEN 1 END) as delivered,
                COUNT(CASE WHEN status = 'error' THEN 1 END) as errors,
                COUNT(CASE WHEN converted = TRUE THEN 1 END) as converted
            FROM broadcast_recipients
            WHERE broadcast_id = %s
        """, (broadcast_id,))
        stats = cur.fetchone()
        
        # Получаем ошибки
        cur.execute("""
            SELECT br.*, bu.username, br.sent_at
            FROM broadcast_recipients br
            LEFT JOIN bot_users bu ON br.user_id = bu.user_id
            WHERE br.broadcast_id = %s AND br.status = 'error'
            LIMIT 100
        """, (broadcast_id,))
        errors = cur.fetchall()
        
        return render_template('broadcast_stats.html', 
                             broadcast=broadcast, 
                             stats=stats,
                             errors=errors)
        
    except Exception as e:
        flash(f'Ошибка: {str(e)}', 'danger')
        return redirect(url_for('broadcast'))
    finally:
        cur.close()
        conn.close()

# ===== ИНТЕГРАЦИИ С CRM =====

@app.route('/integrations')
@login_required
def integrations():
    """Страница управления интеграциями"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Получаем все интеграции
        cur.execute("""
            SELECT 
                i.*,
                COUNT(DISTINCT il.id) as total_sends,
                COUNT(DISTINCT CASE WHEN il.status = 'success' THEN il.id END) as success_sends,
                COUNT(DISTINCT CASE WHEN il.status = 'error' THEN il.id END) as error_sends,
                MAX(il.created_at) as last_sync
            FROM integrations i
            LEFT JOIN integration_logs il ON i.id = il.integration_id
            GROUP BY i.id
            ORDER BY i.created_at DESC
        """)
        integrations = cur.fetchall()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        # Информация о типах CRM
        crm_types = {
            'alphacrm': {'name': 'AlphaCRM', 'icon': 'database'},
            'bitrix24': {'name': 'Bitrix24', 'icon': 'building'},
            'amocrm': {'name': 'amoCRM', 'icon': 'chart-line'},
            'custom': {'name': 'Custom API', 'icon': 'plug'},
            'mock': {'name': 'Test/Demo', 'icon': 'bug'}
        }
        
        return render_template('integrations.html', 
                             integrations=integrations,
                             crm_types=crm_types)
        
    except Exception as e:
        flash(f'Ошибка: {str(e)}', 'danger')
        return redirect(url_for('dashboard'))
    finally:
        cur.close()
        conn.close()

@app.route('/integrations/create', methods=['GET', 'POST'])
@login_required
def create_integration():
    """Создание новой интеграции"""
    if request.method == 'POST':
        data = request.get_json()
        
        conn = get_db_connection()
        cur = conn.cursor()
        
        try:
            # Сохраняем интеграцию
            cur.execute("""
                INSERT INTO integrations (name, type, settings, field_mapping)
                VALUES (%s, %s, %s, %s)
                RETURNING id
            """, (
                data['name'],
                data['type'],
                json.dumps(data['settings']),
                json.dumps(data.get('field_mapping', {}))
            ))
        
        except Exception as e:
        
            print(f'Error: {e}')
            
            integration_id = cur.fetchone()['id']
            conn.commit()
            
            # Тестируем интеграцию
            test_result = test_crm_integration(integration_id, data)
            
            return jsonify({
                'success': True,
                'integration_id': integration_id,
                'test_result': test_result
            })
            
        except Exception as e:
            conn.rollback()
            return jsonify({'success': False, 'error': str(e)})
        finally:
            cur.close()
            conn.close()
    
    return render_template('create_integration.html')

@app.route('/integrations/<int:integration_id>/test', methods=['POST'])
@login_required
def test_integration(integration_id):
    """Тестирование интеграции"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    
    print(f"Testing integration {integration_id}")
    
    try:
        # Получаем данные интеграции
        cur.execute("SELECT * FROM integrations WHERE id = %s", (integration_id,))
        integration = cur.fetchone()
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        if not integration:
            return jsonify({'success': False, 'error': 'Интеграция не найдена'})
        
        # Тестовые данные
        test_data = {
            'name': 'Тест Тестов',
            'phone': '+79001234567',
            'geo': 'Россия',
            'ip': '127.0.0.1',
            'tag': 'test'
        }
        
        # Отправляем тестовый лид
        result = send_to_crm(integration, test_data, None)
        
        # Формируем ответ
        if result.get('success'):
            return jsonify({
                'success': True,
                'message': 'Тест успешно выполнен! Лид отправлен в CRM.',
                'details': str(result.get('response', ''))
            })
        else:
            error_msg = result.get('error', 'Неизвестная ошибка')
            return jsonify({
                'success': False,
                'error': f'Ошибка отправки: {error_msg}',
                'details': str(result.get('response', ''))
            })
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'Ошибка: {str(e)}'})
    finally:
        cur.close()
        conn.close()

@app.route('/integrations/<int:integration_id>/toggle', methods=['POST'])
@login_required
def toggle_integration(integration_id):
    """Включить/выключить интеграцию"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            UPDATE integrations 
            SET is_active = NOT is_active 
            WHERE id = %s
            RETURNING is_active
        """, (integration_id,))
    
    except Exception as e:
    
        print(f'Error: {e}')
        
        result = cur.fetchone()
        conn.commit()
        
        return jsonify({
            'success': True,
            'is_active': result['is_active']
        })
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()

@app.route('/integrations/<int:integration_id>/delete', methods=['POST'])
@login_required
def delete_integration(integration_id):
    """Удалить интеграцию"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        # Удаляем логи
        cur.execute("DELETE FROM integration_logs WHERE integration_id = %s", (integration_id,))
        # Удаляем интеграцию
        cur.execute("DELETE FROM integrations WHERE id = %s", (integration_id,))
        conn.commit()
        
        return jsonify({'success': True})
        
    except Exception as e:
        conn.rollback()
        return jsonify({'success': False, 'error': str(e)})
    finally:
        cur.close()
        conn.close()

# Функция отправки в CRM
def send_to_crm(integration, lead_data, application_id):
    """Отправка лида в CRM"""
    
    print(f"=== SENDING TO CRM ===")
    print(f"Integration type: {integration['type']}")
    print(f"Settings: {integration['settings']}")
    print(f"Lead data: {lead_data}")
    
    import requests
    
    settings = integration['settings']
    crm_type = integration['type']
    
    try:
        if crm_type == 'alphacrm':
            # AlphaCRM API v2
            domain = settings.get('domain', 'api.alphacrm.cc')
            
            # Убираем протокол если есть
            if domain.startswith('http://') or domain.startswith('https://'):
                domain = domain.replace('http://', '').replace('https://', '')
            
            url = f"https://{domain}/api/v2/leads"
            
            print(f"AlphaCRM URL: {url}")
            
            # Разделяем имя на first_name и last_name
            name_parts = lead_data.get('name', '').split(' ', 1)
            first_name = name_parts[0] if name_parts else 'Не указано'
            last_name = name_parts[1] if len(name_parts) > 1 else ''
            
            # Подготовка данных согласно документации
            payload = {
                'aff_id': settings.get('affiliate_id', settings.get('aff_id', '1')),
                'first_name': first_name,
                'last_name': last_name,
                'phone': lead_data.get('phone', ''),
                'email': lead_data.get('email', ''),
                'ip': lead_data.get('ip', '127.0.0.1'),
                'source': settings.get('source', 'telegram_bot'),
                'sub1': lead_data.get('country', ''),
                'sub2': lead_data.get('preferred_time', ''),
                'sub3': f"user_id: {lead_data.get('user_id', '')}",
                'sub4': f"username: {lead_data.get('username', '')}",
                'sub5': settings.get('tag', 'telegram')
            }
            
            # Убираем пустые поля
            payload = {k: v for k, v in payload.items() if v}
            
            print(f"Payload: {payload}")
            
            # Заголовки
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
            
            # Если есть API ключ, добавляем в заголовки
            if settings.get('api_key'):
                headers['Authorization'] = f"Bearer {settings['api_key']}"
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            print(f"Response status: {response.status_code}")
            print(f"Response text: {response.text[:500]}")
            
            response_data = {}
            try:
                response_data = response.json() if response.text else {}
            except:
                response_data = {'raw': response.text}
            
            # Логируем
            if application_id:
                log_integration_send(
                    integration['id'], 
                    application_id,
                    'success' if response.status_code in [200, 201] else 'error',
                    payload,
                    response_data,
                    None if response.status_code in [200, 201] else response.text
                )
            
            return {
                'success': response.status_code in [200, 201],
                'response': response_data,
                'message': response_data.get('message', 'Лид отправлен' if response.status_code in [200, 201] else f'Ошибка: {response.status_code}')
            }
            
        elif crm_type == 'mock':
            # Мок интеграция для тестирования
            return {
                'success': True,
                'response': {'status': 'ok', 'lead_id': '12345'},
                'message': 'Тестовая отправка выполнена успешно (это демо-режим)'
            }
            
        elif crm_type == 'custom':
            # Кастомная интеграция
            url = settings['url']
            method = settings.get('method', 'POST')
            headers = settings.get('headers', {})
            
            # Маппинг полей
            field_mapping = integration.get('field_mapping', {})
            payload = {}
            
            for bot_field, crm_field in field_mapping.items():
                if bot_field in lead_data:
                    payload[crm_field] = lead_data[bot_field]
            
            if method == 'POST':
                response = requests.post(url, json=payload, headers=headers, timeout=30)
            else:
                response = requests.get(url, params=payload, headers=headers, timeout=30)
            
            return {
                'success': response.status_code in [200, 201],
                'response': response.text
            }
            
        else:
            return {'success': False, 'error': f'Неизвестный тип CRM: {crm_type}'}
            
    except Exception as e:
        if application_id:
            log_integration_send(
                integration['id'], 
                application_id,
                'error',
                lead_data,
                None,
                str(e)
            )
        return {'success': False, 'error': str(e)}
def log_integration_send(integration_id, application_id, status, request_data, response_data, error_message):
    """Логирование отправки в CRM"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("""
            INSERT INTO integration_logs 
            (integration_id, application_id, status, request_data, response_data, error_message)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (
            integration_id,
            application_id,
            status,
            json.dumps(request_data),
            json.dumps(response_data) if response_data else None,
            error_message
        ))
        conn.commit()
    except Exception as e:
        print(f"Error logging integration: {e}")
    finally:
        cur.close()
        conn.close()

def test_crm_integration(integration_id, data):
    """Тестирование новой интеграции"""
    test_data = {
        'name': 'Test Lead',
        'phone': '+1234567890',
        'country': 'Test Country',
        'geo': 'Test'
    }
    
    integration = {
        'id': integration_id,
        'type': data['type'],
        'settings': data['settings'],
        'field_mapping': data.get('field_mapping', {})
    }
    
    result = send_to_crm(integration, test_data, None)
    return result


if __name__ == '__main__':
    init_admin()
    app.run(host='0.0.0.0', port=8000, debug=False)




