from datetime import datetime, timedelta
import asyncio
import random
from typing import List, Dict

class BroadcastService:
    def __init__(self, bot_instance, broadcast_model):
        self.bot = bot_instance
        self.model = broadcast_model
        self.scenarios = {
            'warming': [
                {
                    'day': 0,
                    'template': 'üöÄ {name}, –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ!\n\n'
                               '–£–∂–µ –∑–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω–µ–º –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.\n\n'
                               'üí° –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:\n'
                               '‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è\n'
                               '‚Ä¢ –õ–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫\n'
                               '‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n'
                               '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üî•'
                },
                {
                    'day': 3,
                    'template': 'üìà {name}, –∑–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?\n\n'
                               '–ù–∞—à –≤—ã–ø—É—Å–∫–Ω–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –Ω–∞—á–∞–ª —Å 500‚Ç¨ –∏ –∑–∞ 3 –º–µ—Å—è—Ü–∞ —É–≤–µ–ª–∏—á–∏–ª –∫–∞–ø–∏—Ç–∞–ª –¥–æ 3000‚Ç¨!\n\n'
                               'üéØ –ï–≥–æ —Å–µ–∫—Ä–µ—Ç –ø—Ä–æ—Å—Ç:\n'
                               '‚Ä¢ –°–ª–µ–¥–æ–≤–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—É—Ä—Å–∞\n'
                               '‚Ä¢ –ù–µ –∂–∞–¥–Ω–∏—á–∞–ª\n'
                               '‚Ä¢ –£—á–∏–ª—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö\n\n'
                               '–•–æ—Ç–∏—Ç–µ —Ç–∞–∫ –∂–µ? –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å! üöÄ'
                },
                {
                    'day': 5,
                    'template': '‚è∞ {name}, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n'
                               '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å:\n'
                               'üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ DeFi\n'
                               'üéÅ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏\n'
                               'üéÅ –ß–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–≤—ã–µ 1000‚Ç¨"\n\n'
                               '–û—Å—Ç–∞–ª–æ—Å—å 7 –º–µ—Å—Ç! –£—Å–ø–µ–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üëá'
                },
                {
                    'day': 7,
                    'template': 'üî• {name}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å!\n\n'
                               '–ì—Ä—É–ø–ø–∞ –ø–æ—á—Ç–∏ –Ω–∞–±—Ä–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 3 –º–µ—Å—Ç–∞!\n\n'
                               '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n'
                               '‚úÖ –ù–∞—É—á–∏—Ç—å—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–µ\n'
                               '‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n'
                               '‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å\n\n'
                               '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å –∏–ª–∏ –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä? ü§î'
                }
            ],
            'retention': [
                {
                    'interval_days': 3,
                    'template': 'üìö {name}, –Ω–æ–≤—ã–π —É—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n'
                               '–¢–µ–º–∞: "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"\n\n'
                               'üéØ –ò–∑ —É—Ä–æ–∫–∞ –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n'
                               '‚Ä¢ 5 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –º–æ–Ω–µ—Ç\n'
                               '‚Ä¢ –ì–¥–µ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n'
                               '‚Ä¢ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Å–∫–∞–º–∞\n\n'
                               '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üìñ'
                }
            ]
        }
    
    async def send_broadcast(self, broadcast_id: int, test_mode: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast = self.model.get_broadcast_stats(broadcast_id)
        if not broadcast:
            return {'success': False, 'error': '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.model.update_broadcast_status(broadcast_id, 'sending')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = self._get_recipients(broadcast_id, test_mode)
        
        sent_count = 0
        failed_count = 0
        
        for recipient in recipients:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É 30-90 —Å–µ–∫
                delay = random.randint(30, 90) if not test_mode else 1
                await asyncio.sleep(delay)
                
                # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._personalize_message(broadcast['message'], recipient)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                await self.bot.send_message(recipient['user_id'], message)
                
                sent_count += 1
                self._update_recipient_status(broadcast_id, recipient['user_id'], 'sent')
                
            except Exception as e:
                failed_count += 1
                self._update_recipient_status(broadcast_id, recipient['user_id'], 'failed')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        self.model.update_broadcast_status(broadcast_id, 'sent')
        
        return {
            'success': True,
            'sent': sent_count,
            'failed': failed_count
        }
    
    def _get_recipients(self, broadcast_id: int, test_mode: bool) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        if test_mode:
            return [{'user_id': 7825279349, 'username': 'admin'}]  # ADMIN_ID –∏–∑ .env
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        return []
    
    def _personalize_message(self, template: str, recipient: Dict) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = template
        message = message.replace('{name}', recipient.get('username', '–î—Ä—É–≥'))
        message = message.replace('{days_since_start}', str(recipient.get('days', 0)))
        return message
    
    def _update_recipient_status(self, broadcast_id: int, user_id: int, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        pass
    
    def create_scenario(self, name: str, audience_type: str, scenario_type: str) -> int:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if scenario_type not in self.scenarios:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_type}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_messages = self.scenarios[scenario_type]
        
        # –î–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É
        if scenario_type == 'warming':
            broadcast_ids = []
            for step in scenario_messages:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_time = datetime.now() + timedelta(days=step['day'])
                
                broadcast_id = self.model.create_broadcast(
                    name=f"{name} - –î–µ–Ω—å {step['day']}",
                    message=step['template'],
                    audience_type=audience_type,
                    scenario_type=scenario_type
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                self._schedule_broadcast(broadcast_id, send_time)
                broadcast_ids.append(broadcast_id)
            
            return broadcast_ids[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        
        return 0
    
    def _schedule_broadcast(self, broadcast_id: int, send_time: datetime):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º (Celery/APScheduler)
        pass
